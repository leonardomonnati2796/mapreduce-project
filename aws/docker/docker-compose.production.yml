version: '3.8'

services:
  # MapReduce Master Service
  mapreduce-master:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.aws
      args:
        - BUILD_TARGET=master
    image: mapreduce-master:${DOCKER_IMAGE_TAG:-latest}
    container_name: mapreduce-master
    restart: unless-stopped
    ports:
      - "${MASTER_PORT:-8082}:8082"
      - "${DASHBOARD_PORT:-3000}:3000"
    environment:
      - NODE_ROLE=master
      - MASTER_PORT=${MASTER_PORT:-8082}
      - DASHBOARD_PORT=${DASHBOARD_PORT:-3000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      # S3 Configuration
      - S3_SYNC_ENABLED=true
      - S3_SYNC_INTERVAL=${S3_SYNC_INTERVAL:-60s}
    volumes:
      - /var/log/mapreduce:/app/logs
      - /tmp/mapreduce:/tmp/mapreduce
    networks:
      - mapreduce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MASTER_PORT:-8082}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MapReduce Worker Service
  mapreduce-worker:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.aws
      args:
        - BUILD_TARGET=worker
    image: mapreduce-worker:${DOCKER_IMAGE_TAG:-latest}
    container_name: mapreduce-worker
    restart: unless-stopped
    ports:
      - "${WORKER_PORT:-8081}:8081"
    environment:
      - NODE_ROLE=worker
      - WORKER_PORT=${WORKER_PORT:-8081}
      - MASTER_HOST=${MASTER_HOST:-mapreduce-master}
      - MASTER_PORT=${MASTER_PORT:-8082}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      # S3 Configuration
      - S3_SYNC_ENABLED=true
      - S3_SYNC_INTERVAL=${S3_SYNC_INTERVAL:-60s}
    volumes:
      - /var/log/mapreduce:/app/logs
      - /tmp/mapreduce:/tmp/mapreduce
    networks:
      - mapreduce-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WORKER_PORT:-8081}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: mapreduce-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mapreduce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: mapreduce-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /var/log/nginx:/var/log/nginx
    networks:
      - mapreduce-network
    depends_on:
      - mapreduce-master
      - mapreduce-worker
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # CloudWatch agent for monitoring
  cloudwatch-agent:
    image: amazon/cloudwatch-agent:latest
    container_name: mapreduce-cloudwatch
    restart: unless-stopped
    environment:
      - AWS_REGION=${AWS_REGION}
      - LOG_GROUP_NAME=${CLOUDWATCH_LOG_GROUP:-/aws/ec2/mapreduce}
    volumes:
      - /var/log:/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./cloudwatch-config.json:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:ro
    networks:
      - mapreduce-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # S3 backup service
  s3-backup:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.aws
      args:
        - BUILD_TARGET=backup
    image: mapreduce-backup:${DOCKER_IMAGE_TAG:-latest}
    container_name: mapreduce-backup
    restart: unless-stopped
    environment:
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - /var/log/mapreduce:/app/logs
      - /tmp/mapreduce:/tmp/mapreduce
    networks:
      - mapreduce-network
    depends_on:
      - mapreduce-master
      - mapreduce-worker
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

networks:
  mapreduce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
# Makefile per deployment AWS MapReduce

.PHONY: help aws-plan aws-deploy aws-destroy aws-status aws-logs aws-s3 aws-health

# Variabili
AWS_REGION ?= us-east-1
PROJECT_NAME ?= mapreduce
TERRAFORM_DIR = aws/terraform

# Colori per output
BLUE = \033[0;34m
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## Mostra questo help
	@echo "$(BLUE)MapReduce AWS Deployment$(NC)"
	@echo ""
	@echo "$(GREEN)Comandi disponibili:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(GREEN)Variabili d'ambiente:$(NC)"
	@echo "  $(YELLOW)AWS_REGION$(NC)     Regione AWS (default: us-east-1)"
	@echo "  $(YELLOW)PROJECT_NAME$(NC)   Nome del progetto (default: mapreduce)"
	@echo ""
	@echo "$(GREEN)Esempi:$(NC)"
	@echo "  make aws-plan                    # Pianifica il deployment"
	@echo "  make aws-deploy                  # Deploy completo"
	@echo "  make aws-destroy                 # Distruggi l'infrastruttura"
	@echo "  make aws-status                  # Mostra lo stato"
	@echo "  make aws-logs                    # Mostra i log"
	@echo "  make aws-s3                      # Lista file S3"
	@echo "  make aws-health                  # Test health check"

aws-plan: ## Pianifica il deployment AWS
	@echo "$(BLUE)Pianificando deployment AWS...$(NC)"
	@cd $(TERRAFORM_DIR) && terraform init
	@cd $(TERRAFORM_DIR) && terraform validate
	@cd $(TERRAFORM_DIR) && terraform plan -out=tfplan
	@echo "$(GREEN)Piano di deployment creato$(NC)"

aws-deploy: ## Deploy completo su AWS
	@echo "$(BLUE)Deploying su AWS...$(NC)"
	@cd $(TERRAFORM_DIR) && terraform init
	@cd $(TERRAFORM_DIR) && terraform validate
	@cd $(TERRAFORM_DIR) && terraform plan -out=tfplan
	@echo "$(YELLOW)Stai per deployare l'infrastruttura AWS. Questo potrebbe comportare costi.$(NC)"
	@read -p "Vuoi continuare? (y/N): " confirm && [ "$$confirm" = "y" ]
	@cd $(TERRAFORM_DIR) && terraform apply tfplan
	@echo "$(GREEN)Deployment completato!$(NC)"
	@make aws-status

aws-destroy: ## Distruggi l'infrastruttura AWS
	@echo "$(RED)ATTENZIONE: Stai per distruggere l'infrastruttura AWS!$(NC)"
	@echo "$(YELLOW)Questo eliminerà tutti i dati e l'infrastruttura.$(NC)"
	@read -p "Sei sicuro? (y/N): " confirm && [ "$$confirm" = "y" ]
	@cd $(TERRAFORM_DIR) && terraform destroy -auto-approve
	@echo "$(GREEN)Infrastruttura distrutta$(NC)"

aws-status: ## Mostra lo stato dell'infrastruttura
	@echo "$(BLUE)Stato dell'infrastruttura AWS:$(NC)"
	@cd $(TERRAFORM_DIR) && terraform output
	@echo ""
	@echo "$(BLUE)Informazioni di accesso:$(NC)"
	@ALB_DNS=$$(cd $(TERRAFORM_DIR) && terraform output -raw load_balancer_dns 2>/dev/null || echo "N/A"); \
	S3_BUCKET=$$(cd $(TERRAFORM_DIR) && terraform output -raw s3_bucket_name 2>/dev/null || echo "N/A"); \
	echo "  Dashboard: http://$$ALB_DNS"; \
	echo "  Health Check: http://$$ALB_DNS/health"; \
	echo "  S3 Bucket: $$S3_BUCKET"

aws-logs: ## Mostra i log CloudWatch
	@echo "$(BLUE)Log CloudWatch:$(NC)"
	@aws logs describe-log-groups --log-group-name-prefix "/aws/ec2/$(PROJECT_NAME)" --query 'logGroups[].logGroupName' --output table

aws-s3: ## Lista i file nel bucket S3
	@echo "$(BLUE)File nel bucket S3:$(NC)"
	@S3_BUCKET=$$(cd $(TERRAFORM_DIR) && terraform output -raw s3_bucket_name 2>/dev/null || echo ""); \
	if [ -n "$$S3_BUCKET" ]; then \
		aws s3 ls s3://$$S3_BUCKET --recursive; \
	else \
		echo "$(RED)Bucket S3 non trovato$(NC)"; \
	fi

aws-health: ## Test health check
	@echo "$(BLUE)Test health check:$(NC)"
	@ALB_DNS=$$(cd $(TERRAFORM_DIR) && terraform output -raw load_balancer_dns 2>/dev/null || echo ""); \
	if [ -n "$$ALB_DNS" ]; then \
		echo "Testing http://$$ALB_DNS/health"; \
		curl -f "http://$$ALB_DNS/health" && echo "$(GREEN)Health check OK$(NC)" || echo "$(RED)Health check FAILED$(NC)"; \
	else \
		echo "$(RED)Load balancer non trovato$(NC)"; \
	fi

aws-instances: ## Mostra le istanze EC2
	@echo "$(BLUE)Istanze EC2:$(NC)"
	@aws ec2 describe-instances --filters "Name=tag:Name,Values=*$(PROJECT_NAME)*" --query 'Reservations[].Instances[].[InstanceId,State.Name,PublicIpAddress,PrivateIpAddress]' --output table

aws-costs: ## Stima i costi AWS
	@echo "$(BLUE)Stima costi AWS (mensili):$(NC)"
	@echo "  EC2 t3.medium (2 istanze): ~$$60"
	@echo "  Application Load Balancer: ~$$16"
	@echo "  S3 + CloudWatch: ~$$10"
	@echo "  $(GREEN)Totale stimato: ~$$86/mese$(NC)"

aws-backup: ## Esegui backup manuale su S3
	@echo "$(BLUE)Backup manuale su S3:$(NC)"
	@S3_BUCKET=$$(cd $(TERRAFORM_DIR) && terraform output -raw s3_bucket_name 2>/dev/null || echo ""); \
	if [ -n "$$S3_BUCKET" ]; then \
		BACKUP_PATH="backups/manual-$$(date +%Y%m%d-%H%M%S)"; \
		echo "Backup in s3://$$S3_BUCKET/$$BACKUP_PATH"; \
		aws s3 sync /tmp/mapreduce s3://$$S3_BUCKET/$$BACKUP_PATH/; \
		echo "$(GREEN)Backup completato$(NC)"; \
	else \
		echo "$(RED)Bucket S3 non trovato$(NC)"; \
	fi

aws-monitor: ## Avvia monitoring continuo
	@echo "$(BLUE)Monitoring continuo (Ctrl+C per fermare):$(NC)"
	@while true; do \
		echo "=== $$(date) ==="; \
		make aws-health; \
		make aws-instances; \
		echo ""; \
		sleep 60; \
	done

# Comandi di sviluppo
dev-build: ## Builda l'immagine Docker
	@echo "$(BLUE)Building immagine Docker...$(NC)"
	@docker build -f docker/Dockerfile.aws -t $(PROJECT_NAME):latest .
	@echo "$(GREEN)Immagine buildata$(NC)"

dev-test: ## Testa l'applicazione localmente
	@echo "$(BLUE)Testando applicazione localmente...$(NC)"
	@docker-compose -f docker/docker-compose.aws.yml up --build -d
	@echo "$(GREEN)Applicazione avviata$(NC)"
	@echo "Dashboard: http://localhost:8080"
	@echo "Health: http://localhost:8080/health"

dev-clean: ## Pulisce i container locali
	@echo "$(BLUE)Pulizia container locali...$(NC)"
	@docker-compose -f docker/docker-compose.aws.yml down -v
	@docker system prune -f
	@echo "$(GREEN)Pulizia completata$(NC)"

# Comandi di utilità
check-deps: ## Verifica le dipendenze
	@echo "$(BLUE)Verificando dipendenze...$(NC)"
	@command -v aws >/dev/null 2>&1 || { echo "$(RED)AWS CLI non trovato$(NC)"; exit 1; }
	@command -v terraform >/dev/null 2>&1 || { echo "$(RED)Terraform non trovato$(NC)"; exit 1; }
	@command -v docker >/dev/null 2>&1 || { echo "$(RED)Docker non trovato$(NC)"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || { echo "$(RED)Docker Compose non trovato$(NC)"; exit 1; }
	@aws sts get-caller-identity >/dev/null 2>&1 || { echo "$(RED)Credenziali AWS non configurate$(NC)"; exit 1; }
	@echo "$(GREEN)Tutte le dipendenze sono soddisfatte$(NC)"

install-deps: ## Installa le dipendenze (Ubuntu/Debian)
	@echo "$(BLUE)Installando dipendenze...$(NC)"
	@sudo apt-get update
	@sudo apt-get install -y awscli terraform docker.io docker-compose
	@echo "$(GREEN)Dipendenze installate$(NC)"

# Comandi di configurazione
config-aws: ## Configura AWS CLI
	@echo "$(BLUE)Configurazione AWS CLI...$(NC)"
	@aws configure

config-terraform: ## Inizializza Terraform
	@echo "$(BLUE)Inizializzazione Terraform...$(NC)"
	@cd $(TERRAFORM_DIR) && terraform init
	@echo "$(GREEN)Terraform inizializzato$(NC)"

# Comandi di pulizia
clean: ## Pulisce file temporanei
	@echo "$(BLUE)Pulizia file temporanei...$(NC)"
	@rm -f $(TERRAFORM_DIR)/tfplan
	@rm -f .env.aws
	@echo "$(GREEN)Pulizia completata$(NC)"

# Comandi di informazione
info: ## Mostra informazioni sul progetto
	@echo "$(BLUE)Informazioni progetto MapReduce:$(NC)"
	@echo "  Versione: 1.0.0"
	@echo "  Regione AWS: $(AWS_REGION)"
	@echo "  Nome progetto: $(PROJECT_NAME)"
	@echo "  Directory Terraform: $(TERRAFORM_DIR)"
	@echo ""
	@echo "$(GREEN)Per iniziare:$(NC)"
	@echo "  make check-deps    # Verifica dipendenze"
	@echo "  make aws-plan      # Pianifica deployment"
	@echo "  make aws-deploy    # Deploy su AWS"

# Comando di default
.DEFAULT_GOAL := help

pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['local', 'docker', 'aws'],
            description: 'Test environment'
        )
        choice(
            name: 'CATEGORIES',
            choices: ['core', 'raft', 'integration', 'dashboard', 'websocket', 'cluster', 'all'],
            description: 'Test categories to run'
        )
        booleanParam(
            name: 'PARALLEL',
            defaultValue: true,
            description: 'Run tests in parallel'
        )
        booleanParam(
            name: 'VERBOSE',
            defaultValue: false,
            description: 'Verbose output'
        )
        booleanParam(
            name: 'GENERATE_REPORT',
            defaultValue: true,
            description: 'Generate test reports'
        )
        booleanParam(
            name: 'PERFORMANCE_TESTS',
            defaultValue: true,
            description: 'Run performance tests'
        )
        booleanParam(
            name: 'SECURITY_TESTS',
            defaultValue: true,
            description: 'Run security tests'
        )
        booleanParam(
            name: 'COVERAGE_TESTS',
            defaultValue: true,
            description: 'Run coverage tests'
        )
    }
    
    environment {
        BASE_URL = "${env.ENVIRONMENT == 'local' ? 'http://localhost:8080' : env.ENVIRONMENT == 'docker' ? 'http://mapreduce-dashboard:8080' : 'http://ec2-instance:8080'}"
        API_URL = "${BASE_URL}/api/v1"
        TIMEOUT = "${env.ENVIRONMENT == 'aws' ? '60' : '30'}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Setup') {
            steps {
                script {
                    if (env.ENVIRONMENT == 'docker') {
                        sh 'docker --version'
                        sh 'docker-compose --version'
                    }
                }
            }
        }
        
        stage('Start System') {
            steps {
                script {
                    if (env.ENVIRONMENT == 'docker') {
                        sh 'cd test/docker && docker-compose up -d'
                        sleep(time: 30, unit: 'SECONDS')
                    } else if (env.ENVIRONMENT == 'local') {
                        sh 'cd src && go run main.go &'
                        sleep(time: 10, unit: 'SECONDS')
                    }
                }
            }
        }
        
        stage('Core Tests') {
            when {
                anyOf {
                    params.CATEGORIES == 'all'
                    params.CATEGORIES == 'core'
                }
            }
            steps {
                powershell """
                    cd test
                    .\\run-tests-optimized.ps1 -Categories @("core") -Environment "${env.ENVIRONMENT}" -GenerateReport:${env.GENERATE_REPORT} -Verbose:${env.VERBOSE}
                """
            }
        }
        
        stage('Raft Tests') {
            when {
                anyOf {
                    params.CATEGORIES == 'all'
                    params.CATEGORIES == 'raft'
                }
            }
            steps {
                powershell """
                    cd test
                    .\\run-tests-optimized.ps1 -Categories @("raft") -Environment "${env.ENVIRONMENT}" -GenerateReport:${env.GENERATE_REPORT} -Verbose:${env.VERBOSE}
                """
            }
        }
        
        stage('Integration Tests') {
            when {
                anyOf {
                    params.CATEGORIES == 'all'
                    params.CATEGORIES == 'integration'
                }
            }
            steps {
                powershell """
                    cd test
                    .\\run-tests-optimized.ps1 -Categories @("integration") -Environment "${env.ENVIRONMENT}" -GenerateReport:${env.GENERATE_REPORT} -Verbose:${env.VERBOSE}
                """
            }
        }
        
        stage('Dashboard Tests') {
            when {
                anyOf {
                    params.CATEGORIES == 'all'
                    params.CATEGORIES == 'dashboard'
                }
            }
            steps {
                powershell """
                    cd test
                    .\\run-tests-optimized.ps1 -Categories @("dashboard") -Environment "${env.ENVIRONMENT}" -GenerateReport:${env.GENERATE_REPORT} -Verbose:${env.VERBOSE}
                """
            }
        }
        
        stage('WebSocket Tests') {
            when {
                anyOf {
                    params.CATEGORIES == 'all'
                    params.CATEGORIES == 'websocket'
                }
            }
            steps {
                powershell """
                    cd test
                    .\\run-tests-optimized.ps1 -Categories @("websocket") -Environment "${env.ENVIRONMENT}" -GenerateReport:${env.GENERATE_REPORT} -Verbose:${env.VERBOSE}
                """
            }
        }
        
        stage('Cluster Tests') {
            when {
                anyOf {
                    params.CATEGORIES == 'all'
                    params.CATEGORIES == 'cluster'
                }
            }
            steps {
                powershell """
                    cd test
                    .\\run-tests-optimized.ps1 -Categories @("cluster") -Environment "${env.ENVIRONMENT}" -GenerateReport:${env.GENERATE_REPORT} -Verbose:${env.VERBOSE}
                """
            }
        }
        
        stage('Performance Tests') {
            when {
                allOf {
                    params.PERFORMANCE_TESTS == true
                    anyOf {
                        params.CATEGORIES == 'all'
                        params.CATEGORIES == 'dashboard'
                        params.CATEGORIES == 'websocket'
                        params.CATEGORIES == 'cluster'
                    }
                }
            }
            steps {
                powershell """
                    cd test
                    .\\run-tests-optimized.ps1 -Categories @("dashboard", "websocket", "cluster") -MaxConcurrentTests 5 -GenerateReport:${env.GENERATE_REPORT} -Verbose:${env.VERBOSE}
                """
            }
        }
        
        stage('Security Tests') {
            when {
                allOf {
                    params.SECURITY_TESTS == true
                    anyOf {
                        params.CATEGORIES == 'all'
                        params.CATEGORIES == 'dashboard'
                    }
                }
            }
            steps {
                powershell """
                    cd test
                    .\\test-suites\\test-dashboard-optimized.ps1 -Verbose:${env.VERBOSE}
                """
            }
        }
        
        stage('Coverage Tests') {
            when {
                allOf {
                    params.COVERAGE_TESTS == true
                    anyOf {
                        params.CATEGORIES == 'all'
                        params.CATEGORIES == 'core'
                        params.CATEGORIES == 'raft'
                        params.CATEGORIES == 'integration'
                    }
                }
            }
            steps {
                powershell """
                    cd test
                    .\\run-tests-optimized.ps1 -Categories @("core", "raft", "integration") -GenerateReport:${env.GENERATE_REPORT} -Verbose:${env.VERBOSE}
                """
            }
        }
    }
    
    post {
        always {
            script {
                if (env.ENVIRONMENT == 'docker') {
                    sh 'cd test/docker && docker-compose down'
                } else if (env.ENVIRONMENT == 'local') {
                    sh 'pkill -f "go run main.go" || true'
                }
            }
        }
        
        success {
            archiveArtifacts artifacts: 'test/reports/*.json', fingerprint: true
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'test/reports',
                reportFiles: 'test-report-*.html',
                reportName: 'Test Report'
            ])
        }
        
        failure {
            archiveArtifacts artifacts: 'test/logs/*.log', fingerprint: true
        }
        
        always {
            cleanWs()
        }
    }
}

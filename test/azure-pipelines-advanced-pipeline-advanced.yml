trigger:
- main
- develop

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  testEnvironment: 'local'
  testCategories: 'core,raft,integration,dashboard,websocket,cluster'
  testParallel: true
  testVerbose: false
  testGenerateReport: true
  testPerformance: true
  testSecurity: true
  testCoverage: true

stages:
- stage: Setup
  displayName: 'Setup Environment'
  jobs:
  - job: SetupJob
    displayName: 'Setup Test Environment'
    steps:
    - task: PowerShell@2
      displayName: 'Setup PowerShell'
      inputs:
        targetType: 'inline'
        script: |
          $PSVersionTable
          Get-Module -ListAvailable
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PowerShell@2
      displayName: 'Setup Go'
      inputs:
        targetType: 'inline'
        script: |
          go version
          cd src
          go mod download
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PowerShell@2
      displayName: 'Setup Docker'
      inputs:
        targetType: 'inline'
        script: |
          docker --version
          docker-compose --version
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: eq(variables['testEnvironment'], 'docker')

- stage: Test
  displayName: 'Run Test Suite'
  dependsOn: Setup
  jobs:
  - job: CoreTests
    displayName: 'Core Function Tests'
    steps:
    - task: PowerShell@2
      displayName: 'Run Core Tests'
      inputs:
        targetType: 'inline'
        script: |
          cd test
          .\run-tests-optimized.ps1 -Categories @("core") -Environment "$(testEnvironment)" -GenerateReport:$(testGenerateReport) -Verbose:$(testVerbose)
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PublishTestResults@2
      displayName: 'Publish Core Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test/reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

  - job: RaftTests
    displayName: 'Raft Consensus Tests'
    steps:
    - task: PowerShell@2
      displayName: 'Run Raft Tests'
      inputs:
        targetType: 'inline'
        script: |
          cd test
          .\run-tests-optimized.ps1 -Categories @("raft") -Environment "$(testEnvironment)" -GenerateReport:$(testGenerateReport) -Verbose:$(testVerbose)
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PublishTestResults@2
      displayName: 'Publish Raft Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test/reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

  - job: IntegrationTests
    displayName: 'Integration Tests'
    steps:
    - task: PowerShell@2
      displayName: 'Run Integration Tests'
      inputs:
        targetType: 'inline'
        script: |
          cd test
          .\run-tests-optimized.ps1 -Categories @("integration") -Environment "$(testEnvironment)" -GenerateReport:$(testGenerateReport) -Verbose:$(testVerbose)
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test/reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

  - job: DashboardTests
    displayName: 'Dashboard Tests'
    steps:
    - task: PowerShell@2
      displayName: 'Run Dashboard Tests'
      inputs:
        targetType: 'inline'
        script: |
          cd test
          .\run-tests-optimized.ps1 -Categories @("dashboard") -Environment "$(testEnvironment)" -GenerateReport:$(testGenerateReport) -Verbose:$(testVerbose)
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PublishTestResults@2
      displayName: 'Publish Dashboard Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test/reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

  - job: WebSocketTests
    displayName: 'WebSocket Tests'
    steps:
    - task: PowerShell@2
      displayName: 'Run WebSocket Tests'
      inputs:
        targetType: 'inline'
        script: |
          cd test
          .\run-tests-optimized.ps1 -Categories @("websocket") -Environment "$(testEnvironment)" -GenerateReport:$(testGenerateReport) -Verbose:$(testVerbose)
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PublishTestResults@2
      displayName: 'Publish WebSocket Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test/reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

  - job: ClusterTests
    displayName: 'Cluster Management Tests'
    steps:
    - task: PowerShell@2
      displayName: 'Run Cluster Tests'
      inputs:
        targetType: 'inline'
        script: |
          cd test
          .\run-tests-optimized.ps1 -Categories @("cluster") -Environment "$(testEnvironment)" -GenerateReport:$(testGenerateReport) -Verbose:$(testVerbose)
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PublishTestResults@2
      displayName: 'Publish Cluster Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test/reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

- stage: Performance
  displayName: 'Performance Tests'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['testPerformance'], true))
  jobs:
  - job: PerformanceTests
    displayName: 'Performance Test Suite'
    steps:
    - task: PowerShell@2
      displayName: 'Run Performance Tests'
      inputs:
        targetType: 'inline'
        script: |
          cd test
          .\run-tests-optimized.ps1 -Categories @("dashboard", "websocket", "cluster") -MaxConcurrentTests 5 -GenerateReport:$(testGenerateReport) -Verbose:$(testVerbose)
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PublishTestResults@2
      displayName: 'Publish Performance Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test/reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

- stage: Security
  displayName: 'Security Tests'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['testSecurity'], true))
  jobs:
  - job: SecurityTests
    displayName: 'Security Test Suite'
    steps:
    - task: PowerShell@2
      displayName: 'Run Security Tests'
      inputs:
        targetType: 'inline'
        script: |
          cd test
          .\test-suites\test-dashboard-optimized.ps1 -Verbose:$(testVerbose)
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PublishTestResults@2
      displayName: 'Publish Security Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test/reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

- stage: Coverage
  displayName: 'Coverage Tests'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['testCoverage'], true))
  jobs:
  - job: CoverageTests
    displayName: 'Coverage Test Suite'
    steps:
    - task: PowerShell@2
      displayName: 'Run Coverage Tests'
      inputs:
        targetType: 'inline'
        script: |
          cd test
          .\run-tests-optimized.ps1 -Categories @("core", "raft", "integration") -GenerateReport:$(testGenerateReport) -Verbose:$(testVerbose)
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    
    - task: PublishTestResults@2
      displayName: 'Publish Coverage Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test/reports/*.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

- stage: Publish
  displayName: 'Publish Results'
  dependsOn: [Test, Performance, Security, Coverage]
  condition: always()
  jobs:
  - job: PublishResults
    displayName: 'Publish Test Results'
    steps:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Test Reports'
      inputs:
        pathToPublish: 'test/reports'
        artifactName: 'test-reports'
        publishLocation: 'Container'
      condition: always()
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Test Logs'
      inputs:
        pathToPublish: 'test/logs'
        artifactName: 'test-logs'
        publishLocation: 'Container'
      condition: always()
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Performance Reports'
      inputs:
        pathToPublish: 'test/reports'
        artifactName: 'performance-reports'
        publishLocation: 'Container'
      condition: and(succeeded(), eq(variables['testPerformance'], true))
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Reports'
      inputs:
        pathToPublish: 'test/reports'
        artifactName: 'security-reports'
        publishLocation: 'Container'
      condition: and(succeeded(), eq(variables['testSecurity'], true))
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Coverage Reports'
      inputs:
        pathToPublish: 'test/reports'
        artifactName: 'coverage-reports'
        publishLocation: 'Container'
      condition: and(succeeded(), eq(variables['testCoverage'], true))

# Multi-stage Dockerfile for AWS MapReduce Deployment
# Optimized for production use on AWS EC2

# Build stage
FROM golang:1.21-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY src/ ./src/
COPY web/ ./web/

# Build the application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o mapreduce \
    ./src/main.go

# Production stage
FROM alpine:latest

# Install runtime dependencies
RUN apk --no-cache add \
    ca-certificates \
    tzdata \
    curl \
    jq \
    aws-cli

# Create non-root user
RUN addgroup -g 1001 -S mapreduce && \
    adduser -u 1001 -S mapreduce -G mapreduce

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/mapreduce .

# Copy web assets
COPY --from=builder /app/web ./web

# Create data directory
RUN mkdir -p /app/data && \
    chown -R mapreduce:mapreduce /app

# Set environment variables
ENV PORT=8080
ENV GIN_MODE=release
ENV AWS_REGION=us-east-1

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Switch to non-root user
USER mapreduce

# Start the application
CMD ["./mapreduce"]